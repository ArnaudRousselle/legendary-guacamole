/* tslint:disable */
/* eslint-disable */
/**
 * LegendaryGuacamole.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddBillingInput,
  AddBillingOutput,
  AddRepetitiveBillingInput,
  AddRepetitiveBillingOutput,
  DeleteBillingInput,
  DeleteRepetitiveBillingInput,
  EditBillingInput,
  EditBillingOutput,
  EditRepetitiveBillingInput,
  EditRepetitiveBillingOutput,
  GetBillingInput,
  GetBillingOutput,
  GetRepetitiveBillingInput,
  GetRepetitiveBillingOutput,
  GetSummaryOutput,
  InsertNextBillingInput,
  InsertNextBillingOutput,
  ListBillingsInput,
  ListBillingsOutput,
  SetCheckedInput,
  SetCheckedOutput,
} from '../models/index';
import {
    AddBillingInputFromJSON,
    AddBillingInputToJSON,
    AddBillingOutputFromJSON,
    AddBillingOutputToJSON,
    AddRepetitiveBillingInputFromJSON,
    AddRepetitiveBillingInputToJSON,
    AddRepetitiveBillingOutputFromJSON,
    AddRepetitiveBillingOutputToJSON,
    DeleteBillingInputFromJSON,
    DeleteBillingInputToJSON,
    DeleteRepetitiveBillingInputFromJSON,
    DeleteRepetitiveBillingInputToJSON,
    EditBillingInputFromJSON,
    EditBillingInputToJSON,
    EditBillingOutputFromJSON,
    EditBillingOutputToJSON,
    EditRepetitiveBillingInputFromJSON,
    EditRepetitiveBillingInputToJSON,
    EditRepetitiveBillingOutputFromJSON,
    EditRepetitiveBillingOutputToJSON,
    GetBillingInputFromJSON,
    GetBillingInputToJSON,
    GetBillingOutputFromJSON,
    GetBillingOutputToJSON,
    GetRepetitiveBillingInputFromJSON,
    GetRepetitiveBillingInputToJSON,
    GetRepetitiveBillingOutputFromJSON,
    GetRepetitiveBillingOutputToJSON,
    GetSummaryOutputFromJSON,
    GetSummaryOutputToJSON,
    InsertNextBillingInputFromJSON,
    InsertNextBillingInputToJSON,
    InsertNextBillingOutputFromJSON,
    InsertNextBillingOutputToJSON,
    ListBillingsInputFromJSON,
    ListBillingsInputToJSON,
    ListBillingsOutputFromJSON,
    ListBillingsOutputToJSON,
    SetCheckedInputFromJSON,
    SetCheckedInputToJSON,
    SetCheckedOutputFromJSON,
    SetCheckedOutputToJSON,
} from '../models/index';

export interface AddBillingRequest {
    addBillingInput: AddBillingInput;
}

export interface AddRepetitiveBillingRequest {
    addRepetitiveBillingInput: AddRepetitiveBillingInput;
}

export interface DeleteBillingRequest {
    deleteBillingInput: DeleteBillingInput;
}

export interface DeleteRepetitiveBillingRequest {
    deleteRepetitiveBillingInput: DeleteRepetitiveBillingInput;
}

export interface EditBillingRequest {
    editBillingInput: EditBillingInput;
}

export interface EditRepetitiveBillingRequest {
    editRepetitiveBillingInput: EditRepetitiveBillingInput;
}

export interface GetBillingRequest {
    getBillingInput: GetBillingInput;
}

export interface GetRepetitiveBillingRequest {
    getRepetitiveBillingInput: GetRepetitiveBillingInput;
}

export interface GetSummaryRequest {
    body: object;
}

export interface InsertNextBillingRequest {
    insertNextBillingInput: InsertNextBillingInput;
}

export interface ListBillingsRequest {
    listBillingsInput: ListBillingsInput;
}

export interface SetCheckedRequest {
    setCheckedInput: SetCheckedInput;
}

/**
 * 
 */
export class WorkspaceApi extends runtime.BaseAPI {

    /**
     */
    async addBillingRaw(requestParameters: AddBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddBillingOutput>> {
        if (requestParameters['addBillingInput'] == null) {
            throw new runtime.RequiredError(
                'addBillingInput',
                'Required parameter "addBillingInput" was null or undefined when calling addBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/addBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddBillingInputToJSON(requestParameters['addBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddBillingOutputFromJSON(jsonValue));
    }

    /**
     */
    async addBilling(addBillingInput: AddBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddBillingOutput> {
        const response = await this.addBillingRaw({ addBillingInput: addBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async addRepetitiveBillingRaw(requestParameters: AddRepetitiveBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddRepetitiveBillingOutput>> {
        if (requestParameters['addRepetitiveBillingInput'] == null) {
            throw new runtime.RequiredError(
                'addRepetitiveBillingInput',
                'Required parameter "addRepetitiveBillingInput" was null or undefined when calling addRepetitiveBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/addRepetitiveBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRepetitiveBillingInputToJSON(requestParameters['addRepetitiveBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddRepetitiveBillingOutputFromJSON(jsonValue));
    }

    /**
     */
    async addRepetitiveBilling(addRepetitiveBillingInput: AddRepetitiveBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddRepetitiveBillingOutput> {
        const response = await this.addRepetitiveBillingRaw({ addRepetitiveBillingInput: addRepetitiveBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteBillingRaw(requestParameters: DeleteBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['deleteBillingInput'] == null) {
            throw new runtime.RequiredError(
                'deleteBillingInput',
                'Required parameter "deleteBillingInput" was null or undefined when calling deleteBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deleteBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteBillingInputToJSON(requestParameters['deleteBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteBilling(deleteBillingInput: DeleteBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteBillingRaw({ deleteBillingInput: deleteBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRepetitiveBillingRaw(requestParameters: DeleteRepetitiveBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['deleteRepetitiveBillingInput'] == null) {
            throw new runtime.RequiredError(
                'deleteRepetitiveBillingInput',
                'Required parameter "deleteRepetitiveBillingInput" was null or undefined when calling deleteRepetitiveBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deleteRepetitiveBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRepetitiveBillingInputToJSON(requestParameters['deleteRepetitiveBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteRepetitiveBilling(deleteRepetitiveBillingInput: DeleteRepetitiveBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteRepetitiveBillingRaw({ deleteRepetitiveBillingInput: deleteRepetitiveBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async editBillingRaw(requestParameters: EditBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditBillingOutput>> {
        if (requestParameters['editBillingInput'] == null) {
            throw new runtime.RequiredError(
                'editBillingInput',
                'Required parameter "editBillingInput" was null or undefined when calling editBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/editBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditBillingInputToJSON(requestParameters['editBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditBillingOutputFromJSON(jsonValue));
    }

    /**
     */
    async editBilling(editBillingInput: EditBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditBillingOutput> {
        const response = await this.editBillingRaw({ editBillingInput: editBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async editRepetitiveBillingRaw(requestParameters: EditRepetitiveBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditRepetitiveBillingOutput>> {
        if (requestParameters['editRepetitiveBillingInput'] == null) {
            throw new runtime.RequiredError(
                'editRepetitiveBillingInput',
                'Required parameter "editRepetitiveBillingInput" was null or undefined when calling editRepetitiveBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/editRepetitiveBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditRepetitiveBillingInputToJSON(requestParameters['editRepetitiveBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditRepetitiveBillingOutputFromJSON(jsonValue));
    }

    /**
     */
    async editRepetitiveBilling(editRepetitiveBillingInput: EditRepetitiveBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditRepetitiveBillingOutput> {
        const response = await this.editRepetitiveBillingRaw({ editRepetitiveBillingInput: editRepetitiveBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBillingRaw(requestParameters: GetBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBillingOutput>> {
        if (requestParameters['getBillingInput'] == null) {
            throw new runtime.RequiredError(
                'getBillingInput',
                'Required parameter "getBillingInput" was null or undefined when calling getBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetBillingInputToJSON(requestParameters['getBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBillingOutputFromJSON(jsonValue));
    }

    /**
     */
    async getBilling(getBillingInput: GetBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBillingOutput> {
        const response = await this.getBillingRaw({ getBillingInput: getBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRepetitiveBillingRaw(requestParameters: GetRepetitiveBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRepetitiveBillingOutput>> {
        if (requestParameters['getRepetitiveBillingInput'] == null) {
            throw new runtime.RequiredError(
                'getRepetitiveBillingInput',
                'Required parameter "getRepetitiveBillingInput" was null or undefined when calling getRepetitiveBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getRepetitiveBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetRepetitiveBillingInputToJSON(requestParameters['getRepetitiveBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRepetitiveBillingOutputFromJSON(jsonValue));
    }

    /**
     */
    async getRepetitiveBilling(getRepetitiveBillingInput: GetRepetitiveBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRepetitiveBillingOutput> {
        const response = await this.getRepetitiveBillingRaw({ getRepetitiveBillingInput: getRepetitiveBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSummaryRaw(requestParameters: GetSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSummaryOutput>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling getSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getSummary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSummaryOutputFromJSON(jsonValue));
    }

    /**
     */
    async getSummary(body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSummaryOutput> {
        const response = await this.getSummaryRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     */
    async insertNextBillingRaw(requestParameters: InsertNextBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsertNextBillingOutput>> {
        if (requestParameters['insertNextBillingInput'] == null) {
            throw new runtime.RequiredError(
                'insertNextBillingInput',
                'Required parameter "insertNextBillingInput" was null or undefined when calling insertNextBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/insertNextBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsertNextBillingInputToJSON(requestParameters['insertNextBillingInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsertNextBillingOutputFromJSON(jsonValue));
    }

    /**
     */
    async insertNextBilling(insertNextBillingInput: InsertNextBillingInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsertNextBillingOutput> {
        const response = await this.insertNextBillingRaw({ insertNextBillingInput: insertNextBillingInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async listBillingsRaw(requestParameters: ListBillingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListBillingsOutput>>> {
        if (requestParameters['listBillingsInput'] == null) {
            throw new runtime.RequiredError(
                'listBillingsInput',
                'Required parameter "listBillingsInput" was null or undefined when calling listBillings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listBillings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListBillingsInputToJSON(requestParameters['listBillingsInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListBillingsOutputFromJSON));
    }

    /**
     */
    async listBillings(listBillingsInput: ListBillingsInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListBillingsOutput>> {
        const response = await this.listBillingsRaw({ listBillingsInput: listBillingsInput }, initOverrides);
        return await response.value();
    }

    /**
     */
    async setCheckedRaw(requestParameters: SetCheckedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetCheckedOutput>> {
        if (requestParameters['setCheckedInput'] == null) {
            throw new runtime.RequiredError(
                'setCheckedInput',
                'Required parameter "setCheckedInput" was null or undefined when calling setChecked().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/setChecked`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetCheckedInputToJSON(requestParameters['setCheckedInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetCheckedOutputFromJSON(jsonValue));
    }

    /**
     */
    async setChecked(setCheckedInput: SetCheckedInput, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetCheckedOutput> {
        const response = await this.setCheckedRaw({ setCheckedInput: setCheckedInput }, initOverrides);
        return await response.value();
    }

}
